/*
 * Copyright (c) 2016 Redlink GmbH.
 */
package io.redlink.solrlib.embedded;

import io.redlink.solrlib.SolrCoreContainer;
import io.redlink.solrlib.SolrCoreDescriptor;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
import org.apache.solr.core.CoreContainer;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.concurrent.ExecutorService;

/**
 * SolrCoreContainer
 */
public class EmbeddedCoreContainer extends SolrCoreContainer {

    private final EmbeddedCoreContainerConfiguration config;

    private CoreContainer coreContainer = null;

    public EmbeddedCoreContainer(Set<SolrCoreDescriptor> coreDescriptors,
                                 EmbeddedCoreContainerConfiguration configuration) {
        this(coreDescriptors, configuration, null);
    }

    public EmbeddedCoreContainer(Set<SolrCoreDescriptor> coreDescriptors,
                                 EmbeddedCoreContainerConfiguration configuration,
                                 ExecutorService executorService) {
        super(coreDescriptors, executorService);
        config = configuration;
    }

    @Override
    protected void init() throws IOException {
        if (coreContainer != null) {
            throw new IllegalStateException("Already initialized!");
        }
        final Path home = config.getHome().toAbsolutePath();
        final Path lib = home.resolve("lib");
        Files.createDirectories(home);
        Files.createDirectories(lib);

        final Path solrXml = home.resolve("solr.xml");
        if (!Files.exists(solrXml)) {
            log.info("no solr.xml found, creating new at {}", solrXml);
            try (PrintStream writer = new PrintStream(Files.newOutputStream(solrXml, StandardOpenOption.CREATE))) {
                writer.printf("<!-- Generated by %s on %tF %<tT -->%n", getClass().getSimpleName(), new Date());
                writer.println("<solr>");
                writer.printf("  <str name=\"%s\">%s</str>%n", "sharedLib", home.relativize(lib));
                writer.println("</solr>");
            }
        }

        for (SolrCoreDescriptor coreDescriptor : coreDescriptors) {
            final String coreName = coreDescriptor.getCoreName();
            if (availableCores.contains(coreName)) {
                log.warn("CoreName-Clash: {} already initialized. Skipping {}", coreName, coreDescriptor.getClass());
                continue;
            }
            final Path coreDir = home.resolve(coreName);
            Files.createDirectories(coreDir);
            coreDescriptor.initCoreDirectory(coreDir, lib);

            final Properties coreProperties = new Properties();
            final Path corePropertiesFile = coreDir.resolve("core.properties");
            if (Files.exists(corePropertiesFile))
                coreProperties.load(Files.newInputStream(corePropertiesFile, StandardOpenOption.CREATE));
            coreProperties.setProperty("name", coreName);
            coreProperties.store(Files.newOutputStream(corePropertiesFile), null);

            if (coreDescriptor.getNumShards() > 1 || coreDescriptor.getReplicationFactor() > 1) {
                log.warn("Deploying {} to EmbeddedCoreContainer, ignoring config of shards={},replication={}", coreName,
                        coreDescriptor.getNumShards(), coreDescriptor.getReplicationFactor());
            }

            availableCores.add(coreName);
        }

        log.info("Starting {} in solr-home '{}'", getClass().getSimpleName(), home);
        coreContainer = CoreContainer.createAndLoad(home, solrXml);
    }

    @Override
    public final void shutdown() {
        if (coreContainer != null) {
            coreContainer.shutdown();
            coreContainer = null;
        }
    }

    @Override
    protected SolrClient createSolrClient(String coreName) {
        return new EmbeddedSolrServer(coreContainer, coreName) {
            @Override
            public void close() throws IOException {
                // nop;
            }
        };
    }

    public CoreContainer getCoreContainer() {
        try {
            awaitInitCompletion();
            return coreContainer;
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IllegalStateException("Could not retrieve CoreContainer", e);
        }
    }
}
